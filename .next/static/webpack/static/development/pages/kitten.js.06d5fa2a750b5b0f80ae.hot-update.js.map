{"version":3,"file":"static/webpack/static/development/pages/kitten.js.06d5fa2a750b5b0f80ae.hot-update.js","sources":["webpack:///./pages/kitten.js"],"sourcesContent":["import {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport withRedux from 'next-redux-wrapper';\nimport reduxApi from '../lib/reduxApi';\n\nimport PageHead from '../components/PageHead';\nimport KittenItem from '../components/KittenItem';\n\nclass IndexPage extends Component {\n\n    static propTypes = {\n\n        // oneKitten: PropTypes.shape({\n        // \tloading: PropTypes.bool.isRequired,\n        // \tdata: PropTypes.shape({\n        // \t\ttext: PropTypes.string\n        // \t}).isRequired\n        // }).isRequired,\n\n        kittens: PropTypes.shape({\n            loading: PropTypes.bool.isRequired,\n            data: PropTypes.array.isRequired\n        }).isRequired,\n\n        dispatch: PropTypes.func.isRequired\n\n    };\n\n    static async getInitialProps({store, isServer, pathname, query}) {\n        // Get all kittens\n        const kittens = await store.dispatch(reduxApi.actions.kittens.sync());\n        return {kittens};\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {name: ''}\n    }\n\n    handleChangeInputText(event) {\n        this.setState({name: event.target.value});\n    }\n\n    handleAdd(event) {\n        // Progress indicator\n        this.setState({inProgress: true});\n        const callbackWhenDone = () => this.setState({name: '', inProgress: null});\n\n        // Actual data request\n        const newKitten = {\n            name: this.state.name,\n        };\n        this.props.dispatch(reduxApi.actions.kittens.post({}, {body: JSON.stringify(newKitten)}, callbackWhenDone));\n    }\n\n    handleUpdate(index, kittenId, event) {\n        // Progress indicator\n        this.setState({inProgress: kittenId});\n        const callbackWhenDone = () => this.setState({inProgress: null});\n\n        // Actual data request\n        const newKitten = {\n            name: prompt('New name?'),\n        };\n        this.props.dispatch(reduxApi.actions.kittens.put({id: kittenId}, {body: JSON.stringify(newKitten)}, callbackWhenDone));\n    }\n\n    handleDelete(index, kittenId, event) {\n        // Progress indicator\n        this.setState({inProgress: kittenId});\n        const callbackWhenDone = () => this.setState({inProgress: null});\n\n        // Actual data request\n        this.props.dispatch(reduxApi.actions.kittens.delete({id: kittenId}, callbackWhenDone));\n    }\n\n    render() {\n\n        const {kittens} = this.props;//dd\n\n        const kittenList = kittens.data\n            ? kittens.data.map((kitten, index) => <KittenItem\n                key={index}\n                kitten={kitten}\n                index={index}\n                inProgress={this.state.inProgress}\n                handleUpdate={this.handleUpdate.bind(this)}\n                handleDelete={this.handleDelete.bind(this)}\n            />)\n            : [];\n\n        return <div>\n            <PageHead\n                title='Next.js (React) + Express REST API + MongoDB + Mongoose-Crudify boilerplate'\n                description='Demo of nextjs-express-mongoose-crudify-boilerplate'\n            />\n\n            <h1>Kittens</h1>\n\n            {kittenList}\n            <div>\n                <input placeholder='Enter a kitten name' value={this.state.name}\n                       onChange={this.handleChangeInputText.bind(this)} disabled={this.state.inProgress}/>\n                <button onClick={this.handleAdd.bind(this)} disabled={this.state.inProgress}>Add kitten</button>\n                <style jsx>{`\n\t\t\t\t\tdiv {\n\t\t\t\t\t\tmargin-top: 1em;\n\t\t\t\t\t}\n\t\t\t\t`}</style>\n            </div>\n\n        </div>\n    };\n\n}\n\nconst createStoreWithThunkMiddleware = applyMiddleware(thunkMiddleware)(createStore);\nconst makeStore = (reduxState, enhancer) => createStoreWithThunkMiddleware(combineReducers(reduxApi.reducers), reduxState);\nconst mapStateToProps = (reduxState) => ({kittens: reduxState.kittens}); // Use reduxApi endpoint names here\n\nconst IndexPageConnected = withRedux({createStore: makeStore, mapStateToProps})(IndexPage)\nexport default IndexPageConnected;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;AAoBA;;AAEA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAUA;AAEA;AACA;AAFA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAHA;AAAA;AAYA;;;;AAxGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAdA;AACA;AAyGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}